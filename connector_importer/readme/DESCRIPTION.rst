This module allows to import / update records from files using the connector
framework (i.e. mappers) and job queues.

Some overview of the different entities:

- `import.backend`: data model used to group `import.recordset` together and
  put a label on the import mechanism (e.g. *Stock import*). This is also from
  this model that a cron task can be executed to perform an import regularly.

- `import.recordset`: to consider as an "import session", import is performed
  through the `run_import` method. In this data model you declare:
    - what you want to import (`import.type`)
    - where you get records from (a model inheriting from `import.source`,
      e.g. `import.source.csv`)

- `import.record`: generated by `importer.recordset`, it imports a chunk of
  records (the size of the chunk is defined on the `import.source` data model).

- `import.source` inherited data models: get the data to import. A CSV source
  importer is provided in the module (`import.source.csv`) but you will have
  to develop your own source importer for other kind of data.

- `import.type`: the place where you define which data models will be imported
  from the data source. For instance, you can import a `res.users` and
  `res.partner` from the same source record. You will map each data model with
  an `importer.record` based-component (to develop!).

- `importer.record`: base component used to develop yours, obviously one
  component per data model to import (see `import.type` above). It will use
  `importer.base.mapper` based-component related to the data model to import.

- `importer.base.mapper`: base component used to develop yours, obviously one
  component per data model to import (see `importer.record` above). It is used
  to map source fields to Odoo ones (and eventually transform the data).

- `import.source.consumer.mixin`: used by `importer.recordset`, this class
  have to be inherited to add new types of `import.source` (method
  `_selection_source_ref_id`).

- `importer.odoorecord.handler`: component used by `importer.record` to handle
  the creation/update of an Odoo record. It also provides some hooks to
  customize the behavior. Depending on your needs you could define your own
  handler for a given data model by inheriting from this component.

Some other stuff to know:

- `importer.recordset`: component used internally, it handles the import of
  data by using `import.source` and `importer.record` classes for data models.
  You don't need to deal with it for standard use cases.

- `importer.tracking.handler`: component used internally to track what happens
  during the import in order to generate a report for the user
  You don't need to deal with it for standard use cases.

- `cron.mixin`: mixin to manage a cron task. It is inherited by `import.backend`.

- `reporter.mixin`: base mixin for reporters. A reporter, like `reporter.csv`,
  is used to produce a file with a summary of the import that the user can
  generate and download on each recordset.
